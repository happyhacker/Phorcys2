@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Phorcys2Web.Controllers

@{
	ViewData["Title"] = "Contacts";
}
@model IEnumerable<Phorcys.Web.Models.ContactViewModel>

<section class="jumbotron text-center">
	<div class="container">
		<h1 class="jumbotron-heading">@ViewBag.Title</h1>
	</div>
</section>

<div id="message" class="pageMessage">
	@{
		if (ViewContext.TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()] != null)
		{
		}
			<p id="pageMessage">
				@(ViewContext.TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()])
			</p>
	}
</div>

<div class="placeholders mb-2">
	<div class="row d-flex justify-content-start">
	</div>
</div>
<p>
	@*Html.ActionLink("Enter New Dive Plan", "Create", "DivePlan")*@
	<form action="@Url.Action("Create", "Contact")" method="get">
		<button type="submit" class="btn btn-primary">Enter New Contact</button>
	</form>
</p>

<div class="row">
	<div class="col-12">
		@(
				Html.Kendo().Grid(Model)
				.Name("Grid")
				.Columns(columns =>
				{
					columns.Bound(p => p.LoggedIn).Hidden(true);
					columns.Bound(p => p.ContactId).Hidden(true);
					columns.Bound(p => p.UserId).Hidden(true);
					columns.Bound(p => p.Company);
					columns.Bound(p => p.FirstName);
					columns.Bound(p => p.LastName);
					columns.Bound(p => p.Address1);
					columns.Bound(p => p.Address2);
					columns.Bound(p => p.City);
					columns.Bound(p => p.State);
					columns.Bound(p => p.PostalCode);
					columns.Bound(p => p.CountryCode);
					columns.Bound(p => p.Created).Hidden(true).Format("{0:MM/dd/yyyy hh:mm tt}");
					columns.Bound(p => p.LastModified).Hidden(true).Format("{0:MM/dd/yyyy hh:mm tt}");
					columns.Bound(p => p.UserName).Title("User");
					columns.Command(command =>
					{
						command.Custom("Edit").Click("onEdit").Visible("isVisible");
						command.Custom("Delete").Click("onDelete").Visible("isVisible");
					}).Title("Actions");
				})
				.Height(700)
				.Mobile()
				.Resizable(resize => resize.Columns(true)
				)
				.ToolBar(toolbar =>
				{
					toolbar.Excel();
					toolbar.Pdf();
					toolbar.Search();
				})
				.Pdf(pdf => pdf.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
				.Excel(excel => excel.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
				.ColumnMenu(col => col.Filterable(true))
				.Pageable(pageable => pageable
				.ButtonCount(5)
				.Refresh(true)
				.PageSizes(new[] { 5, 10, 20, 40, 800 }))
				.Sortable()
				.Filterable()
				.Scrollable()
				@*.HtmlAttributes(new { style = "height:700px;" })*@
				)
	</div>
</div>

@using (Html.BeginForm("Delete", "Contact", FormMethod.Post, new { id = "hiddenDeleteForm", style = "display:none;" }))
{
	@Html.AntiForgeryToken()
	<input type="hidden" name="ContactId" id="hiddenContactId" value="" />
}
<script>
	function onDelete(e) {
		e.preventDefault();
		var tr = $(e.target).closest("tr");
		var data = this.dataItem(tr);

		var contactId = data.ContactId;
		if (confirm("Are you sure you want to delete this contact? " + contactId)) {
			// Set the DivePlanId in the hidden form and submit the form
			$('#hiddenContactId').val(contactId);
			$('#hiddenDeleteForm').submit();
		}
	}

	function onEdit(e) {
		e.preventDefault();
		var tr = $(e.target).closest("tr");
		var data = this.dataItem(tr);

		var contactId = data.ContactId;
		//alert("ContactId = " + contactId);
		window.location.href = '@Url.Action("Edit", "Contact")/' + contactId;
	}

	function isVisible(data) {
		if (data.LoggedIn == 'system') {
			return true;
		} else {
			return data.UserName != 'System';
		}
	}
</script>

