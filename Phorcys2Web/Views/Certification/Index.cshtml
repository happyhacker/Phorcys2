@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Phorcys2Web.Controllers

@{
	ViewData["Title"] = "Certifications";
}
@model IEnumerable<Phorcys.Web.Models.DiveViewModel>

<section class="jumbotron text-center">
	<div class="container">
		<h1 class="jumbotron-heading">@ViewBag.Title</h1>
	</div>
</section>

<div id="message" class="pageMessage">
	@{
		if (ViewContext.TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()] != null)
		{
		}
		<p id="pageMessage">
			@(ViewContext.TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()])
		</p>
	}
</div>

<div class="placeholders mb-2">
	<div class="row d-flex justify-content-start">
	</div>
</div>
<p>
	@*Html.ActionLink("Enter New Dive", "Create", "Dive")*@
	<form action="@Url.Action("Create", "Dive")" method="get">
		<button type="submit" class="btn btn-primary">Enter New Dive</button>
	</form>
</p>

<div class="row">
	<div class="col-12">
		@(
				Html.Kendo().Grid(Model)
				.Name("Grid")
				.Columns(columns =>
				{
					columns.Bound(p => p.DiveId).Hidden(true);
					columns.Bound(p => p.DiveNumber).Title("#").Width(50);
					columns.Bound(p => p.Title);
					columns.Bound(p => p.DiveSite);
					columns.Bound(p => p.DescentTime).Format("{0:MM/dd/yyyy hh:mm tt}");
					columns.Bound(p => p.Minutes).Width(80);
					columns.Bound(p => p.MaxDepth).Width(120);
					columns.Bound(p => p.Notes).Width(100).Hidden(true);
					columns.Command(command =>
					{
						command.Custom("Edit").Click("onEdit");
						command.Custom("Delete").Click("onDelete");
					}).Title("Actions");
				})
				.Height(700)
				.Mobile()
				.Resizable(resize => resize.Columns(true)
				)
				.ToolBar(toolbar =>
				{
					toolbar.Excel();
					toolbar.Pdf();
					toolbar.Search();
				})
				.Pdf(pdf => pdf.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
				.Excel(excel => excel.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
				.ColumnMenu(col => col.Filterable(true))
				.Pageable(pageable => pageable
				.ButtonCount(5)
				.Refresh(true)
				.PageSizes(new[] { 5, 10, 20, 40, 800 }))
				.Sortable()
				.Groupable()
				.Filterable()
				.Scrollable()
				@*.HtmlAttributes(new { style = "height:700px;" })*@
				)
	</div>
</div>

@using (Html.BeginForm("Delete", "Dive", FormMethod.Post, new { id = "hiddenDeleteForm", style = "display:none;" }))
{
	@Html.AntiForgeryToken()
	<input type="hidden" name="DiveId" id="hiddenDiveId" value="" />
}
<script>
	function onDelete(e) {
		e.preventDefault();
		var tr = $(e.target).closest("tr");
		var data = this.dataItem(tr);

		var diveId = data.DiveId;
		var diveNumber = data.DiveNumber;
		if (confirm("Are you sure you want to delete dive #" + diveNumber + "?")) {
			// Set the DiveId in the hidden form and submit the form
			$('#hiddenDiveId').val(diveId);
			$('#hiddenDeleteForm').submit();
		}
	}

	function onEdit(e) {
		e.preventDefault();
		var tr = $(e.target).closest("tr");
		var data = this.dataItem(tr);

		var diveId = data.DiveId;
		window.location.href = '@Url.Action("Edit", "Dive")/' + diveId;
	}
</script>

