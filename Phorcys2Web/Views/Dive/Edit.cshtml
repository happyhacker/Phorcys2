@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Phorcys2Web.Controllers

@model Phorcys.Web.Models.DiveViewModel

@{
	ViewData["Title"] = "Edit Dive";
}

<div class="placeholders mb-2">
	<div class="row d-flex justify-content-start">
	</div>
</div>

<section class="jumbotron text-center">
	<div class="container">
		<h1 class="jumbotron-heading">@ViewBag.Title</h1>
		<p class="lead-text text-muted">@ViewBag.Message</p>
	</div>
</section>

<div class="pageMessage">
	@Html.ValidationSummary()
</div>

@using (Html.BeginForm("Edit", "Dive", FormMethod.Post))
{
	@Html.AntiForgeryToken()

	<div class="pageMessage">
		@Html.ValidationSummary(true, "Please correct the errors and try again.")
	</div>

	<div class="container">
		<div class="row justify-content-center">
			<div class="col-md-6">

				<fieldset>
					@Html.HiddenFor(m => m.DiveId)
					<div>
						<p>
							<label for="Dive Plan">Dive Plan:</label>
							<br />
							@(Html.Kendo().DropDownListFor(m => m.DivePlanSelectedId)
														.BindTo(Model.DivePlanList)
														.OptionLabel("Select a Dive Plan")
                                                        .Value(Model.DivePlanSelectedId?.ToString())
														.HtmlAttributes(new { @class = "form-control" })
                                                        .Events(e => e.Change("onDivePlanChange"))
														)
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.DivePlanSelectedId)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="Title">Title:</label>
							<br />
							@Html.Kendo().TextBoxFor(m => m.Title)
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.Title)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="DiveNumber">Dive #:</label>
							<br />
							@(Html.Kendo().NumericTextBoxFor(m => m.DiveNumber).Min(1).Step(1).Format("n0"))
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.DiveNumber)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="DescentTime">Descent Time:</label>
							<br />

							@(Html.Kendo().DateTimePickerFor(m => m.DescentTime)
									.HtmlAttributes(new { @style = "width: 300px;" })
														)
							@Html.ValidationMessageFor(m => m.DescentTime)
						</p>
					</div>

					<div>
						<p>
							<label for="Minutes">Minutes:</label>
							<br />
							@(Html.Kendo().NumericTextBoxFor(m => m.Minutes).Min(0).Max(1440).Step(1).Format("n0"))
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.Minutes)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="AvgDepth">Average Depth:</label>
							<br />
							@(Html.Kendo().NumericTextBoxFor(m => m.AvgDepth).Min(0).Max(1000).Step(1).Format("n0"))
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.AvgDepth)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="MaxDepth">Max Depth:</label>
							<br />
							@(Html.Kendo().NumericTextBoxFor(m => m.MaxDepth).Min(0).Max(1200).Step(1).Format("n0"))
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.MaxDepth)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="Temperature">Temperature:</label>
							<br />
							@(Html.Kendo().NumericTextBoxFor(m => m.Temperature).Min(0).Max(600).Step(1).Format("n0"))
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.Temperature)
							</div>
						</p>
					</div>

					<div id="tankGaugesContainer" style="margin-bottom: 30px;" class="mb-5"></div>

					<div>
						<p>
							<label for="AdditionalWeight">Additional Weight:</label>
							<br />
							@(Html.Kendo().NumericTextBoxFor(m => m.AdditionalWeight).Min(0).Max(600).Step(1).Format("n0"))
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.AdditionalWeight)
							</div>
						</p>
					</div>

					<div>
						<p>
							<label for="Notes">Notes:</label>
							<br />
							@(Html.Kendo().TextAreaFor(m => m.Notes).Rows(6))
							<br />
							<div class="pageMessage">
								@Html.ValidationMessageFor(m => m.Notes)
							</div>
						</p>
					</div>

					<div>
						@*<button type="submit" class="btn btn-primary">Save</button>
						@Html.ActionLink("Cancel", "Index", "Dive", null, new { @class = "btn btn-danger" })*@

						@(Html.Kendo().Button()
													.Name("saveButton")
													.HtmlAttributes(new { type = "submit", @class = "btn btn-normal" })
													//.Icon("save")
													.ImageUrl(Url.Content("~/icons/GreenCheckmark.png"))
													.Content("Save")
													)

						@(Html.Kendo().Button()
													.Name("cancelButton")
													.HtmlAttributes(new { @class = "btn btn-normal", onclick = "redirectToIndex();" })
													.ImageUrl(Url.Content("~/icons/RedXMark.png"))
													.Content("Cancel")
													)
					</div>

				</fieldset>

			</div>
		</div>
	</div>
}
<script type="text/javascript">
	function redirectToIndex() {
		window.location.href = '@Url.Action("Index", "Dive")';
	}

	// Dark mode helpers
	function isDarkMode() {
		return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
	}
	function getScaleConfig() {
		const isBlackBackground = isDarkMode();
		return {
			min: 0,
			max: 5000,
			minorUnit: 100,
			majorUnit: 1000,
			startAngle: -30,
			endAngle: 210,
			minorTicks: { visible: true, color: isBlackBackground ? "#cccccc" : "#333333" },
			majorTicks: { visible: true, color: isBlackBackground ? "#ffffff" : "#000000" },
			labels: { color: isBlackBackground ? "#ffffff" : "#000000" }
		};
	}

	// Build the tank UI
	function renderTanks(tanks) {
		$("#tankGaugesContainer").empty();
		if (!tanks || !tanks.length) return;

		tanks.forEach(function (tank, index) {
			const startGaugeId = `tankGaugeStart_${index}`;
			const endGaugeId = `tankGaugeEnd_${index}`;
			const startSliderId = `tankSliderStart_${index}`;
			const endSliderId = `tankSliderEnd_${index}`;
			const startInputId = `tankStartPressure_${index}`;
			const endInputId = `tankEndPressure_${index}`;

			$("#tankGaugesContainer").append(`
				<div class="mb-5">
				  <div class="text-center">
					<label><strong>${tank.GearTitle || "Tank"}</strong></label>
					<div class="row flex-wrap justify-content-center gx-4">
					  <div class="col-md-6 col-12 d-flex flex-column align-items-center mb-4 px-3">
						<p>Starting Pressure</p>
						<div id="${startGaugeId}" style="width:200px;height:200px;"></div>
						<div id="${startSliderId}" style="width:200px;margin-top:10px;"></div>
						<input type="hidden" id="${startInputId}" name="Tanks[${index}].StartingPressure" />
						<div class="mt-3" style="width: 200px;">
						  <div class="mb-2">
							<label class="form-label small">Gas Content:</label>
							<input type="text" class="form-control form-control-sm"
								   name="Tanks[${index}].GasContentTitle"
								   value="${(tank.GasContentTitle != null ? tank.GasContentTitle : 'Air')}"
								   placeholder="Air, Nitrox, Trimix" />
						  </div>
						  <div class="row">
							<div class="col-6">
							  <label class="form-label small">O2 %:</label>
							  <input type="number" class="form-control form-control-sm"
									 name="Tanks[${index}].OxygenPercent"
									 value="${(tank.OxygenPercent != null ? tank.OxygenPercent : 21)}"
									 min="2" max="100" />
							</div>
							<div class="col-6">
							  <label class="form-label small">He %:</label>
							  <input type="number" class="form-control form-control-sm"
									 name="Tanks[${index}].HeliumPercent"
									 value="${(tank.HeliumPercent != null ? tank.HeliumPercent : 0)}"
									 min="0" max="98" />
							</div>
						  </div>
						</div>
					  </div>

					  <div class="col-md-6 col-12 d-flex flex-column align-items-center mb-4 px-3">
						<p>Ending Pressure</p>
						<div id="${endGaugeId}" style="width:200px;height:200px;"></div>
						<div id="${endSliderId}" style="width:200px;margin-top:10px;"></div>
						<input type="hidden" id="${endInputId}" name="Tanks[${index}].EndingPressure" />
						<div class="mt-3" style="width: 200px; height: 108px;"></div>
					  </div>
					</div>
					<input type="hidden" name="Tanks[${index}].GearId" value="${tank.GearId}" />
				  </div>
				</div>
			  `);

			// Gauges
			const startGauge = $(`#${startGaugeId}`).kendoRadialGauge({
				pointer: { value: tank.StartingPressure || 0 },
				scale: getScaleConfig()
			}).data("kendoRadialGauge");

			const endGauge = $(`#${endGaugeId}`).kendoRadialGauge({
				pointer: { value: tank.EndingPressure || 0 },
				scale: getScaleConfig()
			}).data("kendoRadialGauge");

			// Sliders
			$(`#${startSliderId}`).kendoSlider({
				min: 0, max: 5000, smallStep: 100, largeStep: 1000,
				value: tank.StartingPressure || 0, showButtons: false,
				tooltip: { enabled: true },
				slide: function (e) { startGauge.value(e.value); $(`#${startInputId}`).val(e.value); },
				change: function (e) { startGauge.value(e.value); $(`#${startInputId}`).val(e.value); }
			});

			$(`#${endSliderId}`).kendoSlider({
				min: 0, max: 5000, smallStep: 100, largeStep: 1000,
				value: tank.EndingPressure || 0, showButtons: false,
				tooltip: { enabled: true },
				slide: function (e) { endGauge.value(e.value); $(`#${endInputId}`).val(e.value); },
				change: function (e) { endGauge.value(e.value); $(`#${endInputId}`).val(e.value); }
			});

			// Initialize hidden values
			$(`#${startInputId}`).val(tank.StartingPressure || 0);
			$(`#${endInputId}`).val(tank.EndingPressure || 0);
		});
	}

	// Fetch tanks when plan changes
	function onDivePlanChange(e) {
		var divePlanDropdown = $("#DivePlanSelectedId").data("kendoDropDownList");
		var divePlanId = divePlanDropdown ? divePlanDropdown.value() : null;
		if (!divePlanId) return;

		$.ajax({
			url: '@Url.Action("GetTanksForPlan", "Dive")',
			type: 'GET',
			data: { divePlanId: divePlanId },
			success: function (tanks) { renderTanks(tanks); },
			error: function (err) { console.error("Failed to load tanks", err); }
		});
	}

	// Initial load (after Kendo initializes)
	$(function () {
		var divePlanDropdown = $("#DivePlanSelectedId").data("kendoDropDownList");
		var divePlanId = divePlanDropdown ? divePlanDropdown.value() : null;
		if (!divePlanId) return;

		$.ajax({
			url: '@Url.Action("GetTanksForPlan", "Dive")',
			type: 'GET',
			data: { divePlanId: divePlanId },
			success: function (tanks) { renderTanks(tanks); },
			error: function (err) { console.error("Failed to load tanks on page load", err); }
		});
	});

	// Optional: live theme changes
	if (window.matchMedia) {
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function () {
			// You could re-fetch and re-render here if you want to redraw gauges for theme
		});
	}
</script>

