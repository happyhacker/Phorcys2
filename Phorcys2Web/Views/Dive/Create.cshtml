@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Phorcys2Web.Controllers

@model Phorcys.Web.Models.DiveViewModel

@{
    ViewData["Title"] = "New Dive";
}

<div class="placeholders mb-2">
    <div class="row d-flex justify-content-start">
    </div>
</div>

<section class="jumbotron text-center">
    <div class="container">
        <h1 class="jumbotron-heading">@ViewBag.Title</h1>
        <p class="lead-text text-muted">@ViewBag.Message</p>
    </div>
</section>

<div class="pageMessage">
    @Html.ValidationSummary()
</div>

@using (Html.BeginForm("Create", "Dive", FormMethod.Post))
{
    @Html.AntiForgeryToken()

                <div class="pageMessage">
        @Html.ValidationSummary(true, "Please correct the errors and try again.")
                </div>

                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-md-6">

                            <fieldset>

                                <div>
                                    <p>
                                        <label for="Dive Plan">Dive Plan:</label>
                                        <br />

                            @(Html.Kendo().DropDownListFor(m => m.DivePlanSelectedId)
                                            .DataTextField("Text")
                                            .DataValueField("Value")
                                            .BindTo(Model.DivePlanList)
                                            .OptionLabel("Select a Dive Plan")
                                            .HtmlAttributes(new { @class = "form-control", id = "divePlanDropdown" })
                                            .Events(e => e.Change("onDivePlanChange"))
                                            )

                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.DivePlanSelectedId)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="Title">Title:</label>
                                        <br />
                            @Html.Kendo().TextBoxFor(m => m.Title)
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Title)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="DiveNumber">Dive #:</label>
                                        <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.DiveNumber).Min(1).Step(1).Format("n0"))
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.DiveNumber)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="DescentTime">Descent Time:</label>
                                        <br />

                            @(Html.Kendo().DateTimePicker()
                                            .Name("DescentTime") // The Name of the DatePicker is mandatory. It specifies the "id" attribute of the component.
                                            .Value(DateTime.Today) // Sets the value of the DatePicker.
                                            .HtmlAttributes(new { @style = "width: 300px;" })
                                            )
                            @Html.ValidationMessageFor(m => m.DescentTime)
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="Minutes">Minutes:</label>
                                        <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.Minutes).Min(0).Max(1440).Step(1).Format("n0"))
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Minutes)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="AvgDepth">Average Depth:</label>
                                        <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.AvgDepth).Min(0).Max(1000).Step(1).Format("n0"))
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.AvgDepth)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="MaxDepth">Max Depth:</label>
                                        <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.MaxDepth).Min(0).Max(1200).Step(1).Format("n0"))
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.MaxDepth)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="Temperature">Temperature:</label>
                                        <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.Temperature).Min(0).Max(600).Step(1).Format("n0"))
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Temperature)
                                        </div>
                                    </p>
                                </div>

                                <div id="tankGaugesContainer" style="margin-bottom: 30px;" class="mb-5"></div>

                                <div>
                                    <p>
                                        <label for="AdditionalWeight">Additional Weight:</label>
                                        <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.AdditionalWeight).Min(0).Max(600).Step(1).Format("n0"))
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.AdditionalWeight)
                                        </div>
                                    </p>
                                </div>

                                <div>
                                    <p>
                                        <label for="Notes">Notes:</label>
                                        <br />
                            @(Html.Kendo().TextAreaFor(m => m.Notes).Resizable("true").Rows(6))
                                        <br />
                                        <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Notes)
                                        </div>
                                    </p>
                                </div>

                                <div>

                        @(Html.Kendo().Button()
                                        .Name("saveButton")
                                        .HtmlAttributes(new { type = "submit", @class = "btn btn-normal" })
                                        //.Icon("save")
                                        .ImageUrl(Url.Content("~/icons/GreenCheckmark.png"))
                                        .Content("Save")
                                        )

                        @(Html.Kendo().Button()
                                        .Name("cancelButton")
                                        .HtmlAttributes(new { @class = "btn btn-normal", onclick = "redirectToIndex();" })
                                        .ImageUrl(Url.Content("~/icons/RedXMark.png"))
                                        .Content("Cancel")
                                        )
                                </div>

                            </fieldset>

                        </div>
                    </div>
                </div>
}
<script type="text/javascript">
    function redirectToIndex() {
        window.location.href = '@Url.Action("Index", "Dive")';
    }

    // Function to detect if dark mode is active
    function isDarkMode() {
        return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    }

    // Function to get scale configuration based on theme
    function getScaleConfig() {
        const isBlackBackground = isDarkMode();

        return {
            min: 0,
            max: 5000,
            minorUnit: 100,
            majorUnit: 1000,
            startAngle: -30,
            endAngle: 210,
            // Configure tick marks and labels for dark mode
            minorTicks: {
                visible: true,
                color: isBlackBackground ? "#cccccc" : "#333333"  // Light gray for dark mode
            },
            majorTicks: {
                visible: true,
                color: isBlackBackground ? "#ffffff" : "#000000"  // White for dark mode
            },
            labels: {
                color: isBlackBackground ? "#ffffff" : "#000000"  // White text for dark mode
            }
        };
    }

// Robustly get the Kendo widget instance from an input or its wrapper
function getKendoWidget($el) {
  // Try the element itself
  var w = ($el && $el.length) ? kendo.widgetInstance($el[0]) : null;
  if (w) return w;
  // Try the closest Kendo wrapper
  var wrap = $el.closest(".k-widget, .k-input, .k-textbox, .k-numerictextbox, .k-datetimepicker");
  if (wrap.length) {
    w = kendo.widgetInstance(wrap[0]);
    if (w) return w;
  }
  // Fall back to common data() lookups on the input
  return $el.data("kendoDateTimePicker")
      || $el.data("kendoNumericTextBox")
      || $el.data("kendoTextBox")
      || null;
}

function setWidgetValue(id, value) {
  var $el = $("#" + id);
  if ($el.length === 0) return;

  var widget = getKendoWidget($el);

  if (widget) {
    // DateTimePicker
    if (kendo.ui.DateTimePicker && widget instanceof kendo.ui.DateTimePicker) {
      var parsed = value ? kendo.parseDate(value, "yyyy-MM-ddTHH:mm") : null;
      widget.value(parsed);
      widget.trigger("change");
      return;
    }
    // NumericTextBox
    if (kendo.ui.NumericTextBox && widget instanceof kendo.ui.NumericTextBox) {
      var num = (value == null || value === "") ? null : Number(value);
      widget.value(num);
      widget.trigger("change");
      return;
    }
    // TextBox
    if (kendo.ui.TextBox && widget instanceof kendo.ui.TextBox) {
      widget.value(value ?? "");
      return;
    }
  }

  // Fallbacks when the widget didn't init or the ID is on a wrapper:
  if ($el.is("input,textarea")) {
    $el.val(value ?? "");
  } else {
    $el.find("input,textarea").first().val(value ?? "");
  }
}

    // Make Ajax call to get the Tanks tied to the DivePlan selected
    function onDivePlanChange(e) {
  // Use the Kendo widget API for the dropdown
  var ddl = $("#divePlanDropdown").data("kendoDropDownList");
  var divePlanId = ddl ? ddl.value() : $("#divePlanDropdown").val();
  if (!divePlanId) return;

  // 2) NEW: pull defaults (Title, DescentTime, Minutes, MaxDepth) from server and push into Kendo widgets
  $.getJSON('@Url.Action("GetPlanDefaults", "Dive")', { divePlanId: divePlanId })
    .done(function (d) {
      // Title (Kendo TextBox or plain input)
      var tb = $("#Title").data("kendoTextBox");
      if (tb) tb.value(d.Title);
      else $("#Title").val(d.Title ?? "");

      // DescentTime (Kendo DateTimePicker) — parse the server string "yyyy-MM-ddTHH:mm"
      var dtp = $("#DescentTime").data("kendoDateTimePicker");
      if (dtp) dtp.value(kendo.parseDate(d.DescentTime, "yyyy-MM-ddTHH:mm"));

      // Minutes (Kendo NumericTextBox)
      var min = $("#Minutes").data("kendoNumericTextBox");
      if (min) min.value(d.Minutes);

      // MaxDepth (Kendo NumericTextBox)
      var md = $("#MaxDepth").data("kendoNumericTextBox");
      if (md) md.value(d.MaxDepth);
    });

        $.ajax({
            url: '@Url.Action("GetTanksForPlan", "Dive")',
            type: 'GET',
            data: { divePlanId: divePlanId },
            success: function (tanks) {
                $("#tankGaugesContainer").empty();

                tanks.forEach(function (tank, index) {
                    const startGaugeId = `tankGaugeStart_${index}`;
                    const endGaugeId = `tankGaugeEnd_${index}`;
                    const startSliderId = `tankSliderStart_${index}`;
                    const endSliderId = `tankSliderEnd_${index}`;
                    const startInputId = `tankStartPressure_${index}`;
                    const endInputId = `tankEndPressure_${index}`;

                    $("#tankGaugesContainer").append(`
                                    <div class="mb-5">
                                    <div class="text-center">
                                        <label><strong>${tank.GearTitle || "Tank"}</strong></label>
                                        <div class="row flex-wrap justify-content-center gx-4">
                                            <div class="col-md-6 col-12 d-flex flex-column align-items-center mb-4 px-3">
                                                <p>Starting Pressure</p>
                                                <div id="${startGaugeId}" style="width:200px;height:200px;"></div>
                                                <div id="${startSliderId}" style="width:200px;margin-top:10px;"></div>
                                                <input type="hidden" id="${startInputId}" name="Tanks[${index}].StartingPressure" />

                                                <!-- Gas Content Inputs Below Starting Pressure Gauge -->
                                                <div class="mt-3" style="width: 200px;">
                                                    <div class="mb-2">
                                                        <label for="gasContent_${index}" class="form-label small">Gas Content:</label>
                                                        <input type="text" class="form-control form-control-sm" id="gasContent_${index}"
                                                               name="Tanks[${index}].GasContentTitle"
                                                               value="${tank.GasContentTitle || 'Air'}"
                                                               placeholder="Air, Nitrox, Trimix" />
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-6">
                                                            <label for="oxygen_${index}" class="form-label small">O2 %:</label>
                                                            <input type="number" class="form-control form-control-sm" id="oxygen_${index}"
                                                                   name="Tanks[${index}].OxygenPercent"
                                                                   value="${tank.OxygenPercent || 21}"
                                                                   min="2" max="100" />
                                                        </div>
                                                        <div class="col-6">
                                                            <label for="helium_${index}" class="form-label small">He %:</label>
                                                            <input type="number" class="form-control form-control-sm" id="helium_${index}"
                                                                   name="Tanks[${index}].HeliumPercent"
                                                                   value="${tank.HeliumPercent || 0}"
                                                                   min="0" max="98" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-12 d-flex flex-column align-items-center mb-4 px-3">
                                                <p>Ending Pressure</p>
                                                <div id="${endGaugeId}" style="width:200px;height:200px;"></div>
                                                <div id="${endSliderId}" style="width:200px;margin-top:10px;"></div>
                                                <input type="hidden" id="${endInputId}" name="Tanks[${index}].EndingPressure" />

                                                <!-- Spacer to align with gas inputs on left side -->
                                                <div class="mt-3" style="width: 200px; height: 108px;">
                                                    <!-- Empty space to maintain visual balance -->
                                                </div>
                                            </div>
                                        </div>
                                        <input type="hidden" name="Tanks[${index}].GearId" value="${tank.GearId}" />
                                    </div>
                                </div>                        `);

                    // Create Gauges with dark mode support
                    const startGauge = $(`#${startGaugeId}`).kendoRadialGauge({
                        pointer: { value: tank.StartingPressure || 0 },
                        scale: getScaleConfig()
                    }).data("kendoRadialGauge");

                    const endGauge = $(`#${endGaugeId}`).kendoRadialGauge({
                        pointer: { value: tank.EndingPressure || 0 },
                        scale: getScaleConfig()
                    }).data("kendoRadialGauge");

                    // Create Sliders
                    $(`#${startSliderId}`).kendoSlider({
                        min: 0,
                        max: 5000,
                        smallStep: 100,
                        largeStep: 1000,
                        value: tank.StartingPressure || 0,
                        showButtons: false,
                        //tickPlacement: "none",
                        tooltip: { enabled: true },
                        slide: function (e) {
                            startGauge.value(e.value);
                            $(`#${startInputId}`).val(e.value);
                        },
                        change: function (e) {
                            startGauge.value(e.value);
                            $(`#${startInputId}`).val(e.value);
                        }
                    });

                    $(`#${endSliderId}`).kendoSlider({
                        min: 0,
                        max: 5000,
                        smallStep: 100,
                        largeStep: 1000,
                        value: tank.EndingPressure || 0,
                        showButtons: false,
                        //tickPlacement: "none",
                        tooltip: { enabled: true },
                        slide: function (e) {
                            endGauge.value(e.value);
                            $(`#${endInputId}`).val(e.value);
                        },
                        change: function (e) {
                            endGauge.value(e.value);
                            $(`#${endInputId}`).val(e.value);
                        }
                    });

                    // Initialize hidden inputs
                    $(`#${startInputId}`).val(tank.StartingPressure || 0);
                    $(`#${endInputId}`).val(tank.EndingPressure || 0);
                });
            },
            error: function (err) {
                console.error("Failed to load tanks", err);
            }
        });
    }

    // Optional: Listen for system theme changes and update existing gauges
    if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function (e) {
            // If you want to update gauges when user changes system theme
            // while the page is open, you could call onDivePlanChange() here
            // to recreate the gauges with the new theme
        });
    }
</script>