@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Phorcys2Web.Controllers

@model Phorcys.Web.Models.DiveViewModel

@{
    ViewData["Title"] = "New Dive";
}

<div class="placeholders mb-2">
    <div class="row d-flex justify-content-start">
    </div>
</div>

<section class="jumbotron text-center">
    <div class="container">
        <h1 class="jumbotron-heading">@ViewBag.Title</h1>
        <p class="lead-text text-muted">@ViewBag.Message</p>
    </div>
</section>

<div class="pageMessage">
    @Html.ValidationSummary()
</div>

@using (Html.BeginForm("Create", "Dive", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="pageMessage">
        @Html.ValidationSummary(true, "Please correct the errors and try again.")
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">

                <fieldset>

                    <div>
                        <p>
                            <label for="Dive Plan">Dive Plan:</label>
                            <br />

                            @(Html.Kendo().DropDownListFor(m => m.DivePlanSelectedId)
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .BindTo(Model.DivePlanList)
                                .OptionLabel("Select a Dive Plan")
                                .HtmlAttributes(new { @class = "form-control", id = "divePlanDropdown" })
                                .Events(e => e.Change("onDivePlanChange"))
                                )

                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.DivePlanSelectedId)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="Title">Title:</label>
                            <br />
                            @Html.Kendo().TextBoxFor(m => m.Title)
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Title)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="DiveNumber">Dive #:</label>
                            <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.DiveNumber).Min(1).Step(1).Format("n0"))
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.DiveNumber)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="DescentTime">Descent Time:</label>
                            <br />

                            @(Html.Kendo().DateTimePicker()
                                .Name("DescentTime") // The Name of the DatePicker is mandatory. It specifies the "id" attribute of the component.
                                .Value(DateTime.Today) // Sets the value of the DatePicker.
                                .HtmlAttributes(new { @style = "width: 300px;" })
                                )
                            @Html.ValidationMessageFor(m => m.DescentTime)
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="Minutes">Minutes:</label>
                            <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.Minutes).Min(0).Max(1440).Step(1).Format("n0"))
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Minutes)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="AvgDepth">Average Depth:</label>
                            <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.AvgDepth).Min(0).Max(1000).Step(1).Format("n0"))
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.AvgDepth)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="MaxDepth">Max Depth:</label>
                            <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.MaxDepth).Min(0).Max(1200).Step(1).Format("n0"))
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.MaxDepth)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="Temperature">Temperature:</label>
                            <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.Temperature).Min(0).Max(600).Step(1).Format("n0"))
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Temperature)
                            </div>
                        </p>
                    </div>

                    <div id="tankGaugesContainer" style="margin-bottom: 30px;" class="mb-5"></div>

                    <div>
                        <p>
                            <label for="AdditionalWeight">Additional Weight:</label>
                            <br />
                            @(Html.Kendo().NumericTextBoxFor(m => m.AdditionalWeight).Min(0).Max(600).Step(1).Format("n0"))
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.AdditionalWeight)
                            </div>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="Notes">Notes:</label>
                            <br />
                            @(Html.Kendo().TextAreaFor(m => m.Notes).Resizable("true").Rows(6))
                            <br />
                            <div class="pageMessage">
                                @Html.ValidationMessageFor(m => m.Notes)
                            </div>
                        </p>
                    </div>

                    <div>
                        @*<button type="submit" class="btn btn-primary">Save</button>
                    @Html.ActionLink("Cancel", "Index", "Dive", null, new { @class = "btn btn-danger" })*@

                        @(Html.Kendo().Button()
                            .Name("saveButton")
                            .HtmlAttributes(new { type = "submit", @class = "btn btn-normal" })
                            //.Icon("save")
                            .ImageUrl(Url.Content("~/icons/GreenCheckmark.png"))
                            .Content("Save")
                            )

                        @(Html.Kendo().Button()
                            .Name("cancelButton")
                            .HtmlAttributes(new { @class = "btn btn-normal", onclick = "redirectToIndex();" })
                            .ImageUrl(Url.Content("~/icons/RedXMark.png"))
                            .Content("Cancel")
                            )
                    </div>

                </fieldset>

            </div>
        </div>
    </div>
}
<script type="text/javascript">
    function redirectToIndex() {
        window.location.href = '@Url.Action("Index", "Dive")';
    }

    // Make Ajax call to get the Tanks tied to the DivePlan selected

    function onDivePlanChange(e) {
        var divePlanId = $("#divePlanDropdown").val();
        if (!divePlanId) return;

        $.ajax({
            url: '@Url.Action("GetTanksForPlan", "Dive")',
            type: 'GET',
            data: { divePlanId: divePlanId },
            success: function (tanks) {
                $("#tankGaugesContainer").empty();

                tanks.forEach(function (tank, index) {
                    const startGaugeId = `tankGaugeStart_${index}`;
                    const endGaugeId = `tankGaugeEnd_${index}`;
                    const startSliderId = `tankSliderStart_${index}`;
                    const endSliderId = `tankSliderEnd_${index}`;
                    const startInputId = `tankStartPressure_${index}`;
                    const endInputId = `tankEndPressure_${index}`;

                    $("#tankGaugesContainer").append(`
                        <div class="mb-5">
                        <div class="text-center">
                            <label><strong>${tank.GearTitle || "Tank"}</strong></label>
                            <div class="row">
                                <div class="col-md-6 col-12 d-flex flex-column align-items-center">
                                    <p>Starting Pressure</p>
                                    <div id="${startGaugeId}" style="width:200px;height:200px;"></div>
                                    <div id="${startSliderId}" style="width:250px;margin-top:10px;"></div>
                                    <input type="hidden" id="${startInputId}" name="Tanks[${index}].StartingPressure" />
                                </div>
                                <div class="col-md-6 col-12 d-flex flex-column align-items-center">
                                    <p>Ending Pressure</p>
                                    <div id="${endGaugeId}" style="width:200px;height:200px;"></div>
                                    <div id="${endSliderId}" style="width:250px;margin-top:10px;"></div>
                                    <input type="hidden" id="${endInputId}" name="Tanks[${index}].EndingPressure" />
                                </div>
                            </div>
                            <input type="hidden" name="Tanks[${index}].GearId" value="${tank.GearId}" />
                            <input type="hidden" name="Tanks[${index}].GasContentTitle" value="${tank.GasContentTitle || ''}" />
                        </div>
                    </div>                        `);

                    // Create Gauges
                    const startGauge = $(`#${startGaugeId}`).kendoRadialGauge({
                        pointer: { value: tank.StartingPressure || 0 },
                        scale: {
                            min: 0,
                            max: 5000,
                            minorUnit: 100,
                            majorUnit: 1000,
                            startAngle: -30,
                            endAngle: 210
                        }
                    }).data("kendoRadialGauge");

                    const endGauge = $(`#${endGaugeId}`).kendoRadialGauge({
                        pointer: { value: tank.EndingPressure || 0 },
                        scale: {
                            min: 0,
                            max: 5000,
                            minorUnit: 100,
                            majorUnit: 1000,
                            startAngle: -30,
                            endAngle: 210
                        }
                    }).data("kendoRadialGauge");

                    // Create Sliders
                    $(`#${startSliderId}`).kendoSlider({
                        min: 0,
                        max: 5000,
                        smallStep: 100,
                        largeStep: 1000,
                        value: tank.StartingPressure || 0,
                        showButtons: false,
                        //tickPlacement: "none",
                        tooltip: { enabled: true },
                        slide: function (e) {
                            startGauge.value(e.value);
                            $(`#${startInputId}`).val(e.value);
                        },
                        change: function (e) {
                            startGauge.value(e.value);
                            $(`#${startInputId}`).val(e.value);
                        }
                    });

                    $(`#${endSliderId}`).kendoSlider({
                        min: 0,
                        max: 5000,
                        smallStep: 100,
                        largeStep: 1000,
                        value: tank.EndingPressure || 0,
                        showButtons: false,
                        //tickPlacement: "none",
                        tooltip: { enabled: true },
                        slide: function (e) {
                            endGauge.value(e.value);
                            $(`#${endInputId}`).val(e.value);
                        },
                        change: function (e) {
                            endGauge.value(e.value);
                            $(`#${endInputId}`).val(e.value);
                        }
                    });

                    // Initialize hidden inputs
                    $(`#${startInputId}`).val(tank.StartingPressure || 0);
                    $(`#${endInputId}`).val(tank.EndingPressure || 0);
                });
            },
            error: function (err) {
                console.error("Failed to load tanks", err);
            }
        });
    }
</script>

